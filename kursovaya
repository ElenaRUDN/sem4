#include <iostream>
#include <vector>
#include <random>
#include <ctime>

using namespace std;

class Point2D {
public:
    int x, y;
    Point2D(int x = 0, int y = 0) : x(x), y(y) {}
};

class Character {
public:
    Point2D position;
};

class Prey : public Character {
public:
    Prey(int x, int y) {
        position.x = x;
        position.y = y;
    }

    void move() {
        int dx, dy;
        cout << "Prey's move (input dx and dy, dx and dy in [-1, 1]): ";
        cin >> dx >> dy;
        position.x = max(0, min(19, position.x + dx));
        position.y = max(0, min(19, position.y + dy));
    }

    void randomMove() {
        random_device rd;
        mt19937 gen(rd());
        uniform_int_distribution<> dis(-1, 1);
        int dx = dis(gen);
        int dy = dis(gen);
        position.x = max(0, min(19, position.x + dx));
        position.y = max(0, min(19, position.y + dy));
    }
};

class Predator : public Character {
public:
    Predator(int x, int y) {
        position.x = x;
        position.y = y;
    }

    void move() {
        int dx, dy;
        cout << "Predator's move (input dx and dy, dx and dy in [-3, 3]): ";
        cin >> dx >> dy;
        position.x = max(0, min(19, position.x + dx));
        position.y = max(0, min(19, position.y + dy));

        // Apply the special condition
        applySpecialCondition();
    }

    void chase(Prey* prey) {
        int dx = prey->position.x - position.x;
        int dy = prey->position.y - position.y;

        if (dx != 0) {
            position.x += (dx > 0) ? min(3, dx) : max(-3, dx);
        }
        if (dy != 0) {
            position.y += (dy > 0) ? min(3, dy) : max(-3, dy);
        }

        // Apply the special condition
        applySpecialCondition();
    }

private:
    void applySpecialCondition() {
        if (position.x != 0) {
            position.y = 0;
        } else if (position.y != 0) {
            position.x = 0;
        }
    }
};

class Arena {
public:
    Prey* prey;
    Predator* predator;
    int steps;

    Arena(Prey* p, Predator* pr) : prey(p), predator(pr), steps(0) {}

    bool isGameOver() {
        return (predator->position.x == prey->position.x &&
                predator->position.y == prey->position.y) || (steps >= 10);
    }

    void updatePositions(int userRole) {
        if (userRole == 1) {  // User is Prey
            prey->move();
        } else {  // User is Predator
            predator->move();
        }
        predator->chase(prey);
        if (userRole == 2) {
            prey->randomMove();
        }
        steps++;
    }

    void showPositions() {
        cout << "Prey: (" << prey->position.x << ", " << prey->position.y << ")\n";
        cout << "Predator: (" << predator->position.x << ", " << predator->position.y << ")\n";
    }

    void drawBoard() {
        vector<vector<char>> board(20, vector<char>(20, '.'));
        board[prey->position.y][prey->position.x] = 'P';
        board[predator->position.y][predator->position.x] = 'D';

        for (const auto& row : board) {
            for (const auto& cell : row) {
                cout << cell << ' ';
            }
            cout << endl;
        }
    }
};

int main() {
    srand(time(0));
    int userRole;
    cout << "Choose your role: 1 for Prey, 2 for Predator: ";
    cin >> userRole;
    Prey* prey = new Prey(5, 5);
    Predator* predator = new Predator(0, 0);
    Arena* arena = new Arena(prey, predator);

    arena->showPositions();
    arena->drawBoard();
    while (!arena->isGameOver()) {
        arena->updatePositions(userRole);
        arena->showPositions();
        arena->drawBoard();
    }

    cout << "Game over!\n";
    if (arena->steps >= 10) {
        cout << "The game ended because the maximum number of steps was reached.\n";
    }

    delete arena;
    delete prey;
    delete predator;

    return 0;
}
