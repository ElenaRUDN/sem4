#include <iostream>
#include <fstream>
#include <vector>
#include <cstdlib>
#include <string>
class Book {
    std::string id;
    std::string author;
    std::string title;
    int pages;
public:

};
template <typename T>
class Matrix {
private:

    unsigned int m;
    unsigned int n;

public:
    std::vector<std::vector<T>> data;
    Matrix() {
        m = 3;
        n = 3;
        data = std::vector<std::vector<T>>(m, std::vector<T>(n, 0));
    }

    Matrix(unsigned int m, unsigned int n) : m(m), n(n) {
        data = std::vector<std::vector<T>>(m, std::vector<T>(n, 0));
    }

    ~Matrix() {
        std::cout << "DELETED!!!!" << std::endl;
    }

    void fillRandom() {
        for (unsigned int i = 0; i < m; ++i) {
            for (unsigned int j = 0; j < n; ++j) {
                data[i][j] = rand() / 10.0;
            }
        }
    }

    friend std::ostream& operator<<(std::ostream& os, const Matrix<T>& matrix) {
        for (unsigned int i = 0; i < matrix.m; ++i) {
            for (unsigned int j = 0; j < matrix.n; ++j) {
                os << matrix.data[i][j] << " ";
            }
            os << std::endl;
        }
        return os;
    }

    Matrix operator+= (const Matrix<T>& other) {
        if (this->m != other.m || this->n != other.n)
            throw std::invalid_argument("Matrices dimensions do not match");
        else {
            for (int i = 0; i < m; ++i) {
                for (int j = 0; j < n; ++j) {
                    data[i][j] = data[i][j] + other.data[i][j];
                }
            }
        }
        return *this;
    }

    Matrix operator+(const Matrix<T>& other) const {
        Matrix result(*this);
        return result += other;
    }

    Matrix& operator-=(const Matrix<T>& other) {
        for (unsigned int i = 0; i < m; ++i) {
            for (unsigned int j = 0; j < n; ++j) {
                data[i][j] -= other.data[i][j];
            }
        }
        return *this;
    }

    Matrix operator-(const Matrix<T>& other) const {
        Matrix result(*this);
        return result -= other;
    }

    Matrix operator*(const Matrix<T>& other) const {
        if (this->n != other.m)
            throw std::invalid_argument("Matrices dimensions do not match for multiplication");
        Matrix result(m, other.n);
        for (unsigned int i = 0; i < m; ++i) {
            for (unsigned int j = 0; j < other.n; ++j) {
                for (unsigned int k = 0; k < n; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }

    bool operator==(const Matrix<T>& other) const {
        if (m != other.m || n != other.n) {
            return false;
        }
        for (unsigned int i = 0; i < m; ++i) {
            for (unsigned int j = 0; j < n; ++j) {
                if (data[i][j] != other.data[i][j]) {
                    return false;
                }
            }
        }
        return true;
    }

    bool operator!=(const Matrix<T>& other) const {
        return !(*this == other);
    }

};

void countWordOccurrences() {
    std::string wordToFind;
    std::cout << "Enter a word to find: ";
    std::cin >> wordToFind;

    std::fstream file("text.txt", std::ios::in);
    std::string word;
    int count = 0;
    while (file >> word) {
        if (word == wordToFind) {
            count++;
        }
    }

    std::cout << "The word '" << wordToFind << "' occurs " << count << " times in the file." << std::endl;
}

void handleMatrices() {
    Matrix<int> matrix1(2, 2);
    Matrix<int> matrix2(3, 3);
    matrix1.fillRandom();
    matrix2.fillRandom();
    std::ofstream outFile("matrices.txt");
    outFile << matrix1 << matrix2;
    outFile.close();

}

void handleBookCatalogue() {

}

int main() {
    while (true) {
        std::cout << "Enter task number (1 for word counting, 2 for matrices, 3 for book catalogue, 0 to exit): ";
        int task;
        std::cin >> task;
        if (!task) {
            break;
        }

        switch (task) {
        case 1:
            countWordOccurrences();
            break;
        case 2:
            handleMatrices();
            break;
        case 3:
            handleBookCatalogue();
            break;
        default:
            std::cout << "Invalid task number.\n";
        }
    }

    return 0;
}
